FROM python:3.11-slim

WORKDIR /app

# Skapa mappar
RUN mkdir -p backend/engine frontend backend/data/historical

# --- requirements.txt ---
RUN /bin/sh -lc 'cat > backend/requirements.txt << "EOF"\n\
fastapi==0.115.0\n\
uvicorn==0.30.6\n\
pydantic==2.8.2\n\
python-multipart==0.0.9\n\
pandas==2.2.2\n\
numpy==1.26.4\n\
EOF'

RUN pip install --no-cache-dir -r backend/requirements.txt

# --- backend/engine/odds.py ---
RUN /bin/sh -lc 'cat > backend/engine/odds.py << "EOF"\n\
import json\n\
from typing import Tuple, Dict\n\
\n\
def decimal_to_prob(d: float) -> float:\n\
    return 1.0 / d if d else 0.0\n\
\n\
def remove_vig_two_way(p_over_raw: float, p_under_raw: float) -> Tuple[float, float]:\n\
    s = (p_over_raw or 0.0) + (p_under_raw or 0.0)\n\
    if s <= 0:\n\
        return 0.5, 0.5\n\
    return (p_over_raw or 0.0) / s, (p_under_raw or 0.0) / s\n\
\n\
def remove_vig_three_way(ph: float, pd: float, pa: float):\n\
    s = (ph or 0.0) + (pd or 0.0) + (pa or 0.0)\n\
    if s <= 0:\n\
        return 1/3, 1/3, 1/3\n\
    return (ph or 0.0) / s, (pd or 0.0) / s, (pa or 0.0) / s\n\
\n\
def remove_vig_nway(prob_map: Dict[str, float]) -> Dict[str, float]:\n\
    s = sum((v or 0.0) for v in prob_map.values())\n\
    if s <= 0:\n\
        n = max(1, len(prob_map))\n\
        return {k: 1.0/n for k in prob_map}\n\
    return {k: (v or 0.0) / s for k, v in prob_map.items()}\n\
\n\
def ev_decimal(price_decimal: float, p_fair: float) -> float:\n\
    return p_fair * (price_decimal - 1.0) - (1.0 - p_fair)\n\
\n\
def compute_ev_row(row):\n\
    side = str(row.get(\"side\") or \"\").upper()\n\
    price = float(row.get(\"price_bet365\") or 0.0)\n\
    market_class = str(row.get(\"market_class\") or \"\").upper()\n\
\n\
    if market_class == \"OU\" or side in [\"OVER\",\"UNDER\"]:\n\
        p_over_raw = float(row.get(\"baseline_over_prob\", 0.0) or 0.0)\n\
        p_under_raw = float(row.get(\"baseline_under_prob\", 0.0) or 0.0)\n\
        p_over, p_under = remove_vig_two_way(p_over_raw, p_under_raw)\n\
        p_fair = p_over if side == \"OVER\" else p_under\n\
        return ev_decimal(price, p_fair), p_fair\n\
\n\
    if market_class == \"YN\" or side in [\"YES\", \"NO\"]:\n\
        p_yes_raw = float(row.get(\"baseline_yes_prob\", 0.0) or 0.0)\n\
        p_no_raw  = float(row.get(\"baseline_no_prob\", 1.0 - p_yes_raw) or (1.0 - p_yes_raw))\n\
        p_yes, p_no = remove_vig_two_way(p_yes_raw, p_no_raw)\n\
        p_fair = p_yes if side == \"YES\" else p_no\n\
        return ev_decimal(price, p_fair), p_fair\n\
\n\
    if market_class == \"THREE_WAY\" or side in [\"HOME\",\"DRAW\",\"AWAY\"]:\n\
        ph = float(row.get(\"baseline_home_prob\", 0.0) or 0.0)\n\
        pd = float(row.get(\"baseline_draw_prob\", 0.0) or 0.0)\n\
        pa = float(row.get(\"baseline_away_prob\", 0.0) or 0.0)\n\
        ph, pd, pa = remove_vig_three_way(ph, pd, pa)\n\
        mapping = {\"HOME\": ph, \"DRAW\": pd, \"AWAY\": pa}\n\
        p_fair = mapping.get(side, 0.0)\n\
        return ev_decimal(price, p_fair), p_fair\n\
\n\
    if market_class == \"N_WAY\":\n\
        probs = row.get(\"baseline_probs_json\") or row.get(\"probs_json\")\n\
        if isinstance(probs, str):\n\
            try:\n\
                probs = json.loads(probs or \"{}\")\n\
            except Exception:\n\
                probs = {}\n\
        probs = {str(k).upper(): float(v or 0.0) for k, v in (probs or {}).items()}\n\
        probs = remove_vig_nway(probs)\n\
        p_fair = probs.get(side, 0.0)\n\
        return ev_decimal(price, p_fair), p_fair\n\
\n\
    if market_class == \"BAND\":\n\
        probs = row.get(\"band_probs_json\")\n\
        if isinstance(probs, str):\n\
            try:\n\
                probs = json.loads(probs or \"{}\")\n\
            except Exception:\n\
                probs = {}\n\
        probs = {str(k): float(v or 0.0) for k, v in (probs or {}).items()}\n\
        probs = remove_vig_nway(probs)\n\
        p_fair = probs.get(row.get(\"side\"), 0.0)\n\
        return ev_decimal(price, p_fair), p_fair\n\
\n\
    if market_class == \"JOINT\":\n\
        p_joint = float(row.get(\"joint_prob\", 0.0) or 0.0)\n\
        return ev_decimal(price, p_joint), p_joint\n\
\n\
    p_fair = float(row.get(\"model_prob\", 0.0) or 0.0)\n\
    return ev_decimal(price, p_fair), p_fair\n\
EOF'

# --- backend/engine/backtest.py ---
RUN /bin/sh -lc 'cat > backend/engine/backtest.py << "EOF"\n\
from pathlib import Path\n\
import pandas as pd\n\
import numpy as np\n\
from .odds import compute_ev_row\n\
\n\
_CACHE = {\"edges\": None, \"summary\": None}\n\
\n\
def latest_results():\n\
    return _CACHE if _CACHE.get(\"summary\") else None\n\
\n\
def _load_csvs(data_dir: Path) -> pd.DataFrame:\n\
    files = sorted((data_dir / \"historical\").glob(\"*.csv\"))\n\
    if not files:\n\
        return pd.DataFrame()\n\
    dfs = [pd.read_csv(f) for f in files]\n\
    df = pd.concat(dfs, ignore_index=True)\n\
    if \"event_datetime\" in df.columns:\n\
        df[\"event_datetime\"] = pd.to_datetime(df[\"event_datetime\"], errors=\"coerce\")\n\
    return df\n\
\n\
def run_backtest(data_dir: Path, edge_threshold: float = 0.02, kelly_fraction: float = 0.5):\n\
    df = _load_csvs(data_dir)\n\
    if df.empty:\n\
        _CACHE[\"edges\"] = pd.DataFrame()\n\
        _CACHE[\"summary\"] = {\"n_bets\": 0, \"roi\": 0.0, \"pnl\": 0.0, \"hit_rate\": 0.0, \"kelly_fraction\": kelly_fraction, \"by_sport\": {}}\n\
        return _CACHE[\"summary\"]\n\
\n\
    evs, pfs = [], []\n\
    for _, r in df.iterrows():\n\
        ev, p = compute_ev_row(r)\n\
        evs.append(ev); pfs.append(p)\n\
    df[\"p_fair\"] = pfs\n\
    df[\"edge\"] = evs\n\
\n\
    sel = df[df[\"edge\"] >= edge_threshold].copy()\n\
    if sel.empty:\n\
        _CACHE[\"edges\"] = df\n\
        _CACHE[\"summary\"] = {\"n_bets\": 0, \"roi\": 0.0, \"pnl\": 0.0, \"hit_rate\": 0.0, \"kelly_fraction\": kelly_fraction, \"by_sport\": {}}\n\
        return _CACHE[\"summary\"]\n\
\n\
    d = sel[\"price_bet365\"].astype(float)\n\
    p = sel[\"p_fair\"].astype(float)\n\
    kelly_star = (p * d - 1.0) / (d - 1.0)\n\
    kelly_star = kelly_star.clip(lower=0.0, upper=0.5)\n\
    sel[\"stake\"] = kelly_star * kelly_fraction\n\
\n\
    won = sel[\"outcome\"].astype(int)\n\
    sel[\"pnl\"] = np.where(won == 1, sel[\"stake\"] * (d - 1.0), -sel[\"stake\"])\n\
\n\
    total_staked = sel[\"stake\"].sum()\n\
    total_pnl = sel[\"pnl\"].sum()\n\
    roi = (total_pnl / total_staked) if total_staked > 0 else 0.0\n\
    hit_rate = won.mean()\n\
\n\
    by_sport = (\n\
        sel.groupby(\"sport\")\n\
        .agg(n_bets=(\"sport\", \"size\"), pnl=(\"pnl\", \"sum\"), staked=(\"stake\", \"sum\"))\n\
        .assign(roi=lambda x: x[\"pnl\"] / x[\"staked\"])\n\
        .to_dict(orient=\"index\")\n\
    )\n\
\n\
    _CACHE[\"edges\"] = sel.sort_values(\"edge\", ascending=False).reset_index(drop=True)\n\
    _CACHE[\"summary\"] = {\n\
        \"n_bets\": int(sel.shape[0]),\n\
        \"roi\": float(roi),\n\
        \"pnl\": float(total_pnl),\n\
        \"hit_rate\": float(hit_rate),\n\
        \"kelly_fraction\": float(kelly_fraction),\n\
        \"by_sport\": {k: {\"n_bets\": int(v[\"n_bets\"]), \"pnl\": float(v[\"pnl\"]), \"staked\": float(v[\"staked\"]), \"roi\": float(v[\"roi\"])} for k, v in by_sport.items()},\n\
    }\n\
    return _CACHE[\"summary\"]\n\
EOF'

# --- backend/main.py (API + serverar frontend) ---
RUN /bin/sh -lc 'cat > backend/main.py << "EOF"\n\
from fastapi import FastAPI, UploadFile, File, Form\n\
from fastapi.middleware.cors import CORSMiddleware\n\
from fastapi.staticfiles import StaticFiles\n\
from fastapi.responses import FileResponse\n\
from pydantic import BaseModel\n\
from typing import Optional, Dict\n\
from pathlib import Path\n\
import pandas as pd\n\
import json\n\
\n\
from engine.backtest import run_backtest, latest_results\n\
\n\
BASE_DIR = Path(__file__).parent\n\
DATA_DIR = BASE_DIR / \"data\"\n\
HIST_DIR = DATA_DIR / \"historical\"\n\
HIST_DIR.mkdir(parents=True, exist_ok=True)\n\
FRONTEND_DIR = (BASE_DIR.parent / \"frontend\").resolve()\n\
\n\
app = FastAPI(title=\"EdgeForge API\", version=\"0.1.0\")\n\
\n\
app.add_middleware(\n\
    CORSMiddleware,\n\
    allow_origins=[\"*\"],\n\
    allow_credentials=True,\n\
    allow_methods=[\"*\"],\n\
    allow_headers=[\"*\"],\n\
)\n\
\n\
if FRONTEND_DIR.exists():\n\
    app.mount(\"/static\", StaticFiles(directory=FRONTEND_DIR, html=False), name=\"static\")\n\
\n\
class BacktestResponse(BaseModel):\n\
    n_bets: int\n\
    roi: float\n\
    pnl: float\n\
    hit_rate: float\n\
    kelly_fraction: float\n\
    by_sport: Dict[str, Dict[str, float]]\n\
\n\
@app.get(\"/\")\n\
def serve_index():\n\
    index_path = FRONTEND_DIR / \"index.html\"\n\
    if index_path.exists():\n\
        return FileResponse(index_path)\n\
    return {\"ok\": True, \"message\": \"EdgeForge API running\"}\n\
\n\
@app.post(\"/api/data/upload\")\n\
async def upload_csv(file: UploadFile = File(...)):\n\
    contents = await file.read()\n\
    out = HIST_DIR / file.filename\n\
    out.write_bytes(contents)\n\
    try:\n\
        _ = pd.read_csv(out, nrows=2)\n\
    except Exception as e:\n\
        out.unlink(missing_ok=True)\n\
        return {\"ok\": False, \"error\": str(e)}\n\
    return {\"ok\": True, \"filename\": file.filename}\n\
\n\
@app.post(\"/api/backtest/run\", response_model=BacktestResponse)\n\
async def api_backtest_run(edge_threshold: float = 0.02, kelly_fraction: float = 0.5):\n\
    summary = run_backtest(DATA_DIR, edge_threshold=edge_threshold, kelly_fraction=kelly_fraction)\n\
    return BacktestResponse(**summary)\n\
\n\
@app.get(\"/api/edges\")\n\
async def api_edges(min_edge: float = 0.02, sport: Optional[str] = None, limit: int = 500):\n\
    res = latest_results()\n\
    if not res or res.get(\"edges\") is None:\n\
        return []\n\
    df = res[\"edges\"].copy()\n\
    if sport:\n\
        df = df[df[\"sport\"].astype(str).str.upper() == sport.upper()]\n\
    df = df[df[\"edge\"] >= min_edge].sort_values(\"edge\", ascending=False).head(limit)\n\
    return df.to_dict(orient=\"records\")\n\
EOF'

# --- frontend/index.html (enkel admin UI) ---
RUN /bin/sh -lc 'cat > frontend/index.html << "EOF"\n\
<!doctype html>\n\
<html lang=\"sv\">\n\
<head>\n\
  <meta charset=\"utf-8\" />\n\
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\
  <title>EdgeForge</title>\n\
  <script src=\"https://cdn.tailwindcss.com\"></script>\n\
</head>\n\
<body class=\"bg-slate-50\">\n\
  <div class=\"max-w-6xl mx-auto p-6 space-y-6\">\n\
    <header>\n\
      <h1 class=\"text-3xl font-bold text-slate-900\">EdgeForge</h1>\n\
      <p class=\"text-slate-600\">Ladda upp historik och kör backtest (+EV för player props).</p>\n\
    </header>\n\
\n\
    <section class=\"bg-white rounded-2xl shadow p-5\">\n\
      <h2 class=\"text-xl font-semibold mb-3\">1) Ladda upp historisk CSV</h2>\n\
      <input id=\"csv\" type=\"file\" accept=\".csv\" class=\"block\">\n\
      <button id=\"upload\" class=\"mt-3 px-4 py-2 rounded-xl border\">Ladda upp</button>\n\
      <div id=\"upload-status\" class=\"mt-2 text-slate-600\"></div>\n\
    </section>\n\
\n\
    <section class=\"bg-white rounded-2xl shadow p-5\">\n\
      <h2 class=\"text-xl font-semibold mb-3\">2) Kör backtest</h2>\n\
      <div class=\"flex flex-wrap gap-3 items-end\">\n\
        <label class=\"block\">\n\
          <span class=\"text-sm text-slate-600\">Edge-tröskel</span>\n\
          <input id=\"edge-threshold\" type=\"number\" step=\"0.01\" value=\"0.02\" class=\"mt-1 w-32 border rounded-xl px-3 py-2\">\n\
        </label>\n\
        <label class=\"block\">\n\
          <span class=\"text-sm text-slate-600\">Kelly-fraktion</span>\n\
          <input id=\"kelly\" type=\"number\" step=\"0.1\" value=\"0.5\" class=\"mt-1 w-32 border rounded-xl px-3 py-2\">\n\
        </label>\n\
        <button id=\"run\" class=\"px-4 py-2 rounded-xl bg-emerald-600 text-white\">Kör</button>\n\
        <span id=\"run-status\" class=\"text-slate-600\"></span>\n\
      </div>\n\
      <div class=\"grid md:grid-cols-3 gap-4 mt-4\">\n\
        <div class=\"bg-slate-50 rounded-xl p-4 border\">\n\
          <div class=\"text-sm text-slate-500\">Bets</div>\n\
          <div id=\"stat-bets\" class=\"text-2xl font-semibold\">–</div>\n\
        </div>\n\
        <div class=\"bg-slate-50 rounded-xl p-4 border\">\n\
          <div class=\"text-sm text-slate-500\">ROI</div>\n\
          <div id=\"stat-roi\" class=\"text-2xl font-semibold\">–</div>\n\
        </div>\n\
        <div class=\"bg-slate-50 rounded-xl p-4 border\">\n\
          <div class=\"text-sm text-slate-500\">Hit rate</div>\n\
          <div id=\"stat-hit\" class=\"text-2xl font-semibold\">–</div>\n\
        </div>\n\
      </div>\n\
    </section>\n\
\n\
    <section class=\"bg-white rounded-2xl shadow p-5\">\n\
      <div class=\"flex flex-wrap items-center gap-3 justify-between\">\n\
        <h2 class=\"text-xl font-semibold\">Edges</h2>\n\
        <div class=\"flex gap-2\">\n\
          <input id=\"filter-sport\" class=\"border rounded-xl px-3 py-2 w-36\" placeholder=\"FOOTBALL\">\n\
          <label class=\"flex items-center gap-2\">\n\
            <span class=\"text-sm text-slate-600\">Min edge</span>\n\
            <input id=\"filter-min-edge\" type=\"number\" step=\"0.01\" value=\"0.02\" class=\"w-28 border rounded-xl px-3 py-2\">\n\
          </label>\n\
          <button id=\"refresh\" class=\"px-4 py-2 rounded-xl border\">Uppdatera</button>\n\
        </div>\n\
      </div>\n\
      <div class=\"overflow-x-auto mt-4\">\n\
        <table class=\"min-w-full text-sm\">\n\
          <thead class=\"bg-slate-100 text-slate-700\">\n\
            <tr>\n\
              <th class=\"p-2 text-left\">Sport</th>\n\
              <th class=\"p-2 text-left\">Liga</th>\n\
              <th class=\"p-2 text-left\">Marknad</th>\n\
              <th class=\"p-2 text-left\">Spelare</th>\n\
              <th class=\"p-2 text-left\">Sida</th>\n\
              <th class=\"p-2 text-left\">Line</th>\n\
              <th class=\"p-2 text-left\">Pris</th>\n\
              <th class=\"p-2 text-left\">p_fair</th>\n\
              <th class=\"p-2 text-left\">Edge</th>\n\
              <th class=\"p-2 text-left\">Stake</th>\n\
              <th class=\"p-2 text-left\">PnL</th>\n\
            </tr>\n\
          </thead>\n\
          <tbody id=\"edges-body\"></tbody>\n\
        </table>\n\
      </div>\n\
    </section>\n\
  </div>\n\
\n\
<script>\n\
const API = \"\"; // samma origin\n\
document.getElementById(\"upload\").onclick = async () => {\n\
  const f = document.getElementById(\"csv\").files[0];\n\
  if(!f){ document.getElementById(\"upload-status\").textContent = \"Välj en CSV först.\"; return; }\n\
  const fd = new FormData(); fd.append(\"file\", f);\n\
  const r = await fetch(\"/api/data/upload\", { method:\"POST\", body: fd });\n\
  const j = await r.json();\n\
  document.getElementById(\"upload-status\").textContent = j.ok ? (\"Uppladdad: \"+j.filename) : (\"Fel: \"+j.error);\n\
};\n\
document.getElementById(\"run\").onclick = async () => {\n\
  const edge = parseFloat(document.getElementById(\"edge-threshold\").value || \"0.02\");\n\
  const kelly = parseFloat(document.getElementById(\"kelly\").value || \"0.5\");\n\
  const r = await fetch(`/api/backtest/run?edge_threshold=${edge}&kelly_fraction=${kelly}`, { method:\"POST\" });\n\
  const j = await r.json();\n\
  document.getElementById(\"stat-bets\").textContent = j.n_bets;\n\
  document.getElementById(\"stat-roi\").textContent = (j.roi*100).toFixed(2)+\"%\";\n\
  document.getElementById(\"stat-hit\").textContent = (j.hit_rate*100).toFixed(1)+\"%\";\n\
  document.getElementById(\"run-status\").textContent = \"Backtest klart.\";\n\
  loadEdges();\n\
};\n\
document.getElementById(\"refresh\").onclick = () => loadEdges();\n\
async function loadEdges(){\n\
  const sport = document.getElementById(\"filter-sport\").value;\n\
  const minEdge = document.getElementById(\"filter-min-edge\").value || 0.02;\n\
  const url = new URL(window.location.origin + \"/api/edges\");\n\
  if (sport) url.searchParams.set(\"sport\", sport);\n\
  url.searchParams.set(\"min_edge\", minEdge);\n\
  url.searchParams.set(\"limit\", 500);\n\
  const r = await fetch(url);\n\
  const edges = await r.json();\n\
  const tbody = document.getElementById(\"edges-body\");\n\
  tbody.innerHTML = \"\";\n\
  edges.forEach(e => {\n\
    const tr = document.createElement(\"tr\");\n\
    tr.className = \"border-b last:border-0\";\n\
    tr.innerHTML = `\n\
      <td class=\"p-2\">${e.sport||\"\"}</td>\n\
      <td class=\"p-2\">${e.league||\"\"}</td>\n\
      <td class=\"p-2\">${e.market_type||\"\"}</td>\n\
      <td class=\"p-2\">${e.player||\"\"}</td>\n\
      <td class=\"p-2\">${e.side||\"\"}</td>\n\
      <td class=\"p-2\">${e.line??\"\"}</td>\n\
      <td class=\"p-2\">${e.price_bet365??\"\"}</td>\n\
      <td class=\"p-2\">${Number(e.p_fair||0).toFixed(3)}</td>\n\
      <td class=\"p-2 font-medium\">${Number(e.edge||0).toFixed(3)}</td>\n\
      <td class=\"p-2\">${Number(e.stake||0).toFixed(3)}</td>\n\
      <td class=\"p-2 ${e.pnl>=0 ? 'text-emerald-600':'text-rose-600'}\">${Number(e.pnl||0).toFixed(3)}</td>\n\
    `;\n\
    tbody.appendChild(tr);\n\
  });\n\
}\n\
</script>\n\
</body>\n\
</html>\n\
EOF'

# Kör servern
WORKDIR /app/backend
ENV PORT=8000
EXPOSE 8000
CMD ["uvicorn","main:app","--host","0.0.0.0","--port","8000"]
